[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Using ggplot2 to produce meaningful plots",
    "section": "",
    "text": "Motivation",
    "crumbs": [
      "Motivation"
    ]
  },
  {
    "objectID": "index.html#variability-in-measurements",
    "href": "index.html#variability-in-measurements",
    "title": "Using ggplot2 to produce meaningful plots",
    "section": "Variability in measurements",
    "text": "Variability in measurements\nVariability in measurements is a thing that happens as a natural consequence of working with complex systems that are affected by many variables in stochastic ways. Biological systems are some of the most variable we know. The variability in our experiments could be a function of the behaviour of the system yet it is common practice to hide that variability when we start to analyse our data by using summary plots like box-plots. Ultimately, that’s bad news for our science, because the variability could be telling us something.",
    "crumbs": [
      "Motivation"
    ]
  },
  {
    "objectID": "index.html#summarising-your-data-can-lead-to-wrong-conclusions",
    "href": "index.html#summarising-your-data-can-lead-to-wrong-conclusions",
    "title": "Using ggplot2 to produce meaningful plots",
    "section": "Summarising your data can lead to wrong conclusions",
    "text": "Summarising your data can lead to wrong conclusions\nWe all know that when you create a bar chart and put some error bars on it, you’re really only representing two numbers, usually a mean and standard deviation. People create bar plots instinctively, and in doing so can miss important stuff. Look at this figure:\n source: Weissgerber et al\nThe bar chart in panel A is one that came out of all those sets of numbers in the other panels. But it really hides some important stuff, like the fact the numbers are clearly separating into two groups in panel D, or that the two samples have different sizes in panel E.\nWorse than any of these is that the significant difference in the t-test is coming from just one point in panel C. From this data set you might be tempted to conclude that there is a significant difference in the two samples and if you relied on the bar chart as a visualisation then you’d never suspect there was something funny.\nSome enthusiastic young science communicators have even started a Kickstarter to lobby journals to stop using, in particular, bar charts! These people, calling themselves Bar Barplots, have a nice video on one of the main problems with bar charts. Have a look at this page on Kickstarter . Kickstarter - Barbarplots, especially this video Kickstarter - Barbarplots video.\nIgnoring your data visualisation and just making bar plots could be an error! It’s important that you spend a little time getting to know, and presenting your data as clearly and thoroughly as possible.",
    "crumbs": [
      "Motivation"
    ]
  },
  {
    "objectID": "index.html#p---one-value-to-fool-them-all",
    "href": "index.html#p---one-value-to-fool-them-all",
    "title": "Using ggplot2 to produce meaningful plots",
    "section": "p - one value to fool them all?",
    "text": "p - one value to fool them all?\nBut why would you care about this, in the end a p-value won’t a p-value help you see real differences and make this all easy? Sadly, that isn’t true. Let’s do an experiment to test that.\n\nTen Thousand Random Numbers\nBelow is a set of figures that show different views of the same set of data. Every frame of the 100 frames shows a different sampling from the same pool of 10,000 random normally distributed numbers.\n\n\n\nRandom Sample Plots\n\n\nStep-by-step, here’s how these figures are made.\n\nGenerate a pool of 10,000 random numbers (mean 5, sd 1)\nFrom that, select 10 and call it sample 1.\nSelect another 10, call it sample 2.\nDraw plots comparing each sample\nDo an independent t-test on the sample 1 and sample 2 to test for significant differences in means.\n\nThe figures are plotted with a red border if p comes up less than 0.05. The thing is, the samples are from the same background pool, so intuitively you might suspect that none should be different from the others. The reason that some of them do is because a p value only states that the difference observed occurs by chance in p of all events, so for 100, we’d expect 5 to be marked out by chance. In this run of the experiment we get three. Here’s a couple:\n \nLook at the different plots for each. It is observable that for all these the barplots look very convincingly different. But in the context with the other plots its clear that they aren’t showing the whole of the story (or in fact much of it). The boxplots (top left) do a good job of showing the range and the violin and density plots (bottom row) do a good job of showing the shape. It is only really the point plot (first column, middle row) that reveals the positions of the data points and shows that the conclusion of the p value is likely skewed by one or two points in each sample. Concluding differences on this basis is really unsafe.\nHence, the conclusion from this is that a range of visualisations is necessary to allow us to have confidence in our p values and understand the shapes of our data. Drawing box plots and sticking to p religiously is going to make us wrong more than we’d like!",
    "crumbs": [
      "Motivation"
    ]
  },
  {
    "objectID": "index.html#ggplot2-an-r-package-for-beautiful-visualisations",
    "href": "index.html#ggplot2-an-r-package-for-beautiful-visualisations",
    "title": "Using ggplot2 to produce meaningful plots",
    "section": "ggplot2 An R package for beautiful visualisations",
    "text": "ggplot2 An R package for beautiful visualisations\nIn this tutorial we are going to use ggplot2 a package in R to make some clear, informative, thorough visualisations that will help us with our analysis. Here’s an example of the sort of thing you can get from ggplot:\n\n\n\nggplot 2 iris data\n\n\nggplot2 is a library in the R statistical programming language - but we won’t be learning to program here. The gg part stands for ‘grammar of graphics’, and ggplot2 is a small grammar that describes plots that should be built on top of data - effectively allowing a user to write their own plot description and have the computer work out what to do, so no programming is needed, just an appreciation of the grammar that is used to describe the plot.",
    "crumbs": [
      "Motivation"
    ]
  },
  {
    "objectID": "03-ggplot2-tour.html",
    "href": "03-ggplot2-tour.html",
    "title": "1  ggplot2 Tour",
    "section": "",
    "text": "1.1 About this chapter",
    "crumbs": [
      "ggplot2 fundamentals",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>_ggplot2_ Tour</span>"
    ]
  },
  {
    "objectID": "03-ggplot2-tour.html#about-this-chapter",
    "href": "03-ggplot2-tour.html#about-this-chapter",
    "title": "1  ggplot2 Tour",
    "section": "",
    "text": "Questions:\n\n\nHow does ggplot2 work?\n\n\nObjectives:\n\n\nExplain the structure of a ggplot2\nExplain the flexibilty of the structure\n\n\nKeypoints:\n\n\nggplot2 plots are made in user defined layers\nUsing layers helps us to change plot types quickly or build progressively more complex charts",
    "crumbs": [
      "ggplot2 fundamentals",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>_ggplot2_ Tour</span>"
    ]
  },
  {
    "objectID": "03-ggplot2-tour.html#building-a-plot-with-ggplot2",
    "href": "03-ggplot2-tour.html#building-a-plot-with-ggplot2",
    "title": "1  ggplot2 Tour",
    "section": "1.2 Building a plot with ggplot2",
    "text": "1.2 Building a plot with ggplot2\nLoading ggplot2 into memory so we can use it is very easy. With RStudio started, and in the console window type:\n\nlibrary(ggplot2)\n\nNothing should happen, thats a good sign!\n\n1.3 It didn’t load - I got an error\nYou need to go back and look at the install instructions, using the packages tab in the bottom right hand window of R studio, click install and type ggplot2 into the window that appears. Select install and it should automatically install. If this doesn’t work seek some expert help. {: .callout }\n\n\n1.3.1 Loading the iris test data\nR has some datasets built in that allow us to easily develop analysis. Let’s look at the iris data\n\niris\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n1            5.1         3.5          1.4         0.2     setosa\n2            4.9         3.0          1.4         0.2     setosa\n3            4.7         3.2          1.3         0.2     setosa\n4            4.6         3.1          1.5         0.2     setosa\n5            5.0         3.6          1.4         0.2     setosa\n6            5.4         3.9          1.7         0.4     setosa\n7            4.6         3.4          1.4         0.3     setosa\n8            5.0         3.4          1.5         0.2     setosa\n9            4.4         2.9          1.4         0.2     setosa\n10           4.9         3.1          1.5         0.1     setosa\n11           5.4         3.7          1.5         0.2     setosa\n12           4.8         3.4          1.6         0.2     setosa\n13           4.8         3.0          1.4         0.1     setosa\n14           4.3         3.0          1.1         0.1     setosa\n15           5.8         4.0          1.2         0.2     setosa\n16           5.7         4.4          1.5         0.4     setosa\n17           5.4         3.9          1.3         0.4     setosa\n18           5.1         3.5          1.4         0.3     setosa\n19           5.7         3.8          1.7         0.3     setosa\n20           5.1         3.8          1.5         0.3     setosa\n21           5.4         3.4          1.7         0.2     setosa\n22           5.1         3.7          1.5         0.4     setosa\n23           4.6         3.6          1.0         0.2     setosa\n24           5.1         3.3          1.7         0.5     setosa\n25           4.8         3.4          1.9         0.2     setosa\n26           5.0         3.0          1.6         0.2     setosa\n27           5.0         3.4          1.6         0.4     setosa\n28           5.2         3.5          1.5         0.2     setosa\n29           5.2         3.4          1.4         0.2     setosa\n30           4.7         3.2          1.6         0.2     setosa\n31           4.8         3.1          1.6         0.2     setosa\n32           5.4         3.4          1.5         0.4     setosa\n33           5.2         4.1          1.5         0.1     setosa\n34           5.5         4.2          1.4         0.2     setosa\n35           4.9         3.1          1.5         0.2     setosa\n36           5.0         3.2          1.2         0.2     setosa\n37           5.5         3.5          1.3         0.2     setosa\n38           4.9         3.6          1.4         0.1     setosa\n39           4.4         3.0          1.3         0.2     setosa\n40           5.1         3.4          1.5         0.2     setosa\n41           5.0         3.5          1.3         0.3     setosa\n42           4.5         2.3          1.3         0.3     setosa\n43           4.4         3.2          1.3         0.2     setosa\n44           5.0         3.5          1.6         0.6     setosa\n45           5.1         3.8          1.9         0.4     setosa\n46           4.8         3.0          1.4         0.3     setosa\n47           5.1         3.8          1.6         0.2     setosa\n48           4.6         3.2          1.4         0.2     setosa\n49           5.3         3.7          1.5         0.2     setosa\n50           5.0         3.3          1.4         0.2     setosa\n51           7.0         3.2          4.7         1.4 versicolor\n52           6.4         3.2          4.5         1.5 versicolor\n53           6.9         3.1          4.9         1.5 versicolor\n54           5.5         2.3          4.0         1.3 versicolor\n55           6.5         2.8          4.6         1.5 versicolor\n56           5.7         2.8          4.5         1.3 versicolor\n57           6.3         3.3          4.7         1.6 versicolor\n58           4.9         2.4          3.3         1.0 versicolor\n59           6.6         2.9          4.6         1.3 versicolor\n60           5.2         2.7          3.9         1.4 versicolor\n61           5.0         2.0          3.5         1.0 versicolor\n62           5.9         3.0          4.2         1.5 versicolor\n63           6.0         2.2          4.0         1.0 versicolor\n64           6.1         2.9          4.7         1.4 versicolor\n65           5.6         2.9          3.6         1.3 versicolor\n66           6.7         3.1          4.4         1.4 versicolor\n67           5.6         3.0          4.5         1.5 versicolor\n68           5.8         2.7          4.1         1.0 versicolor\n69           6.2         2.2          4.5         1.5 versicolor\n70           5.6         2.5          3.9         1.1 versicolor\n71           5.9         3.2          4.8         1.8 versicolor\n72           6.1         2.8          4.0         1.3 versicolor\n73           6.3         2.5          4.9         1.5 versicolor\n74           6.1         2.8          4.7         1.2 versicolor\n75           6.4         2.9          4.3         1.3 versicolor\n76           6.6         3.0          4.4         1.4 versicolor\n77           6.8         2.8          4.8         1.4 versicolor\n78           6.7         3.0          5.0         1.7 versicolor\n79           6.0         2.9          4.5         1.5 versicolor\n80           5.7         2.6          3.5         1.0 versicolor\n81           5.5         2.4          3.8         1.1 versicolor\n82           5.5         2.4          3.7         1.0 versicolor\n83           5.8         2.7          3.9         1.2 versicolor\n84           6.0         2.7          5.1         1.6 versicolor\n85           5.4         3.0          4.5         1.5 versicolor\n86           6.0         3.4          4.5         1.6 versicolor\n87           6.7         3.1          4.7         1.5 versicolor\n88           6.3         2.3          4.4         1.3 versicolor\n89           5.6         3.0          4.1         1.3 versicolor\n90           5.5         2.5          4.0         1.3 versicolor\n91           5.5         2.6          4.4         1.2 versicolor\n92           6.1         3.0          4.6         1.4 versicolor\n93           5.8         2.6          4.0         1.2 versicolor\n94           5.0         2.3          3.3         1.0 versicolor\n95           5.6         2.7          4.2         1.3 versicolor\n96           5.7         3.0          4.2         1.2 versicolor\n97           5.7         2.9          4.2         1.3 versicolor\n98           6.2         2.9          4.3         1.3 versicolor\n99           5.1         2.5          3.0         1.1 versicolor\n100          5.7         2.8          4.1         1.3 versicolor\n101          6.3         3.3          6.0         2.5  virginica\n102          5.8         2.7          5.1         1.9  virginica\n103          7.1         3.0          5.9         2.1  virginica\n104          6.3         2.9          5.6         1.8  virginica\n105          6.5         3.0          5.8         2.2  virginica\n106          7.6         3.0          6.6         2.1  virginica\n107          4.9         2.5          4.5         1.7  virginica\n108          7.3         2.9          6.3         1.8  virginica\n109          6.7         2.5          5.8         1.8  virginica\n110          7.2         3.6          6.1         2.5  virginica\n111          6.5         3.2          5.1         2.0  virginica\n112          6.4         2.7          5.3         1.9  virginica\n113          6.8         3.0          5.5         2.1  virginica\n114          5.7         2.5          5.0         2.0  virginica\n115          5.8         2.8          5.1         2.4  virginica\n116          6.4         3.2          5.3         2.3  virginica\n117          6.5         3.0          5.5         1.8  virginica\n118          7.7         3.8          6.7         2.2  virginica\n119          7.7         2.6          6.9         2.3  virginica\n120          6.0         2.2          5.0         1.5  virginica\n121          6.9         3.2          5.7         2.3  virginica\n122          5.6         2.8          4.9         2.0  virginica\n123          7.7         2.8          6.7         2.0  virginica\n124          6.3         2.7          4.9         1.8  virginica\n125          6.7         3.3          5.7         2.1  virginica\n126          7.2         3.2          6.0         1.8  virginica\n127          6.2         2.8          4.8         1.8  virginica\n128          6.1         3.0          4.9         1.8  virginica\n129          6.4         2.8          5.6         2.1  virginica\n130          7.2         3.0          5.8         1.6  virginica\n131          7.4         2.8          6.1         1.9  virginica\n132          7.9         3.8          6.4         2.0  virginica\n133          6.4         2.8          5.6         2.2  virginica\n134          6.3         2.8          5.1         1.5  virginica\n135          6.1         2.6          5.6         1.4  virginica\n136          7.7         3.0          6.1         2.3  virginica\n137          6.3         3.4          5.6         2.4  virginica\n138          6.4         3.1          5.5         1.8  virginica\n139          6.0         3.0          4.8         1.8  virginica\n140          6.9         3.1          5.4         2.1  virginica\n141          6.7         3.1          5.6         2.4  virginica\n142          6.9         3.1          5.1         2.3  virginica\n143          5.8         2.7          5.1         1.9  virginica\n144          6.8         3.2          5.9         2.3  virginica\n145          6.7         3.3          5.7         2.5  virginica\n146          6.7         3.0          5.2         2.3  virginica\n147          6.3         2.5          5.0         1.9  virginica\n148          6.5         3.0          5.2         2.0  virginica\n149          6.2         3.4          5.4         2.3  virginica\n150          5.9         3.0          5.1         1.8  virginica\n\n\nR just printed the whole thing to screen and we end up looking at just the bottom end of it. Let’s look at just the top.\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nWe can see that we have the top six rows and we can see that the data is a list of measurments of the sepals and petals for some species of iris. Let’s get a summary of the data set:\n\nsummary(iris)\n\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n\n\nAlright, that’s quite clear, some summary values for each numeric column and note how R has calculated the number of rows of each distinct label for the text column.\n\n\n1.3.2 A first plot\nggplot2 plots are built up of layers, the foundation layer is the data layer, thats the whole data set containing the bits we would want to plot. We define that with the ggplot2 command.\n\nlibrary(ggplot2) \nggplot(data=iris)\n\n\n\n\n\n\n\n\nNothing happened, you got a blank screen in the plot window to the right. That’s because a data layer alone doesn’t tell us what, or how to plot. It’s just the source of the numbers we’ll use.\nThe next thing we need is an aesthetic layer. This is basically the things to look at, and includes:\n 1. x and y axes (sometimes called position)\n 2. colour (the line colour of a thing)\n 3. fill (the block colour of a thing) \n 4. shape (e.g of points)\n 5. line type\n 6. size (e.g of points)\nLet’s decide to look at petal width and length. We use the aes() function for the aesthetic and we can add layers together with the + operator.\n\nggplot(data=iris) + aes(x=Petal.Width, y=Petal.Length)\n\n\n\n\n\n\n\n\nThis time we get axes in the plot window. ggplot now knows the data source and the things that should be displayed on the axis, but it doesn’t fully know how to display them. That is done in the geom (or geometric objects) layer. There are loads of geoms e.g\n1. `geom_point()` for scatter plots\n2. `geom_line()` for trend lines\n3. `geom_boxplot()` for boxplots!\nLet’s add a geom layer.\n\nggplot(data=iris) + aes(x=Petal.Width, y=Petal.Length) + geom_point()\n\n\n\n\n\n\n\n\nNow we see the whole plot. The data has been mapped onto the right axes and the geometric objects on top of that. Let’s go crazy and add more layers.\n\nggplot(data=iris) + aes(x=Petal.Width, y=Petal.Length) + geom_point() + geom_line()\n\n\n\n\n\n\n\n\nYou can see the new geom just adds straight on top of the old one. By default, geom_line() is a simple join the dots sort of line, so it looks really squiggly. Different layers can have their own options set, e.g the points can be coloured.\n\nggplot(data=iris) + aes(x=Petal.Width, y=Petal.Length) + geom_point(colour=\"Red\") + geom_line()\n\n\n\n\n\n\n\n\n\n1.4 Making and saving a base plot\nThere is actually no need to go round typing in the whole command above repetively all the time. ggplot2 layers can be saved to R variables like this:\np &lt;- ggplot(data=iris) + aes(x=Petal.Width, y=Petal.Length)\nand the bits we want to add or change stuck on top:\np + geom_point()",
    "crumbs": [
      "ggplot2 fundamentals",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>_ggplot2_ Tour</span>"
    ]
  },
  {
    "objectID": "03-ggplot2-tour.html#mappings-versus-assignment",
    "href": "03-ggplot2-tour.html#mappings-versus-assignment",
    "title": "1  ggplot2 Tour",
    "section": "1.5 Mappings versus assignment",
    "text": "1.5 Mappings versus assignment\nThe power of ggplot to ‘just do the right thing’ comes from its use of mappings, these can be thought of as rules for what to do when it meets a bit of data in a particular place.\nAbove we set the colour, geom_point() to \"Red\". This set all the points to red, it was an assignment, since ggplot didn’t have anything to work out, every point is just red. By setting the colour to a column in the data we can make ggplot work colours out for us dependent on the information in that column. Try:\n\np &lt;- ggplot(data=iris) + aes(x=Petal.Width, y=Petal.Length)\np + geom_point(aes(colour=Species))\n\n\n\n\n\n\n\n\nThis time we told ggplot to use the value of the Species column to colour each data point, ggplot decided on a mapping for a list of colours to each different value in the Species column and drew that on the plot for us. Only aesthetics can be mappings, so we had to use an aes() function inside the geom.\nLots of aesthetic features can be mapped to data, try size and shape, and try mixing them.\n\np + geom_point(aes(size=Species))\n\nWarning: Using size for a discrete variable is not advised.\n\n\n\n\n\n\n\n\n\n\np + geom_point(aes(colour=Species))\n\n\n\n\n\n\n\n\n\np + geom_point(aes(shape=Species))\n\n\n\n\n\n\n\n\n\np + geom_point(aes(size=Species,colour=Species,shape=Species))\n\nWarning: Using size for a discrete variable is not advised.",
    "crumbs": [
      "ggplot2 fundamentals",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>_ggplot2_ Tour</span>"
    ]
  },
  {
    "objectID": "03-ggplot2-tour.html#quiz",
    "href": "03-ggplot2-tour.html#quiz",
    "title": "1  ggplot2 Tour",
    "section": "1.6 Quiz",
    "text": "1.6 Quiz\n\nUse the docs at https://ggplot2.tidyverse.org/reference/ to examine the geoms that are available. Try geom_jitter(), why choose this over geom_point()?\nUse this base plot p &lt;- ggplot(data=iris) + aes(x=Petal.Width, y=Petal.Length)\nWhat happens if you map a continuous variable to an aesthetic like colour? EG aes(color=Petal.Width)\nTry combining geom_smooth() with geom_jitter()\nWhy doesn’t geom_boxplot() work with a continuous varialbe like Petal.Width? (Hint: you need to think about the difference between categorical or discrete and continuous data).\nHow could you make geom_boxplot() show you box plots for the three species Petal.Width. (Hint: you need to think about the aesthetic and where you set it.",
    "crumbs": [
      "ggplot2 fundamentals",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>_ggplot2_ Tour</span>"
    ]
  },
  {
    "objectID": "04-geoms.html",
    "href": "04-geoms.html",
    "title": "2  Common Geoms",
    "section": "",
    "text": "2.1 About this chapter",
    "crumbs": [
      "Making a data appropriate plot",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Common Geoms</span>"
    ]
  },
  {
    "objectID": "04-geoms.html#about-this-chapter",
    "href": "04-geoms.html#about-this-chapter",
    "title": "2  Common Geoms",
    "section": "",
    "text": "Questions:\n\n\nWhat sorts of plot can I do?\n\n\nObjectives:\n\n\nDemonstrate the main types of plot\n\n\nKeypoints:\n\n\nThere are geoms for continuous and discrete data\nSelecting and mixing these properly can give a nice representation of your data",
    "crumbs": [
      "Making a data appropriate plot",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Common Geoms</span>"
    ]
  },
  {
    "objectID": "04-geoms.html#continuous-geoms",
    "href": "04-geoms.html#continuous-geoms",
    "title": "2  Common Geoms",
    "section": "2.2 Continuous geoms",
    "text": "2.2 Continuous geoms\nLet’s look at some geoms that use continuous data on the x and y axis.\n\n2.2.1 geom_smooth()\nThe built in geom geom_smooth() is a great one for getting a nice summary line through the data\n\np &lt;- ggplot(iris) + aes(Petal.Width,Petal.Length) + geom_point()\np + geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nBy default, this isn’t a simple line of best fit, as you can see the smoothed line has curves! And it has a grey region that shows the standard error of the line. To get the standard line of the form y=mx+c, use\n\np + geom_smooth(method = \"lm\", se = FALSE)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n2.2.2 What’s the r2?\nHaving shown you how to put the line of best fit on the graph, you probably want to know how to get the equation and r2 value. That takes a little bit of pure R. Here’s how, using the lm linear model function. The syntax for this is lm(y ~ x, dataset) so for the iris data and the graph we just made (note the order Y and X is used in not the order X and Y)\n\nmodel &lt;- lm(Petal.Length ~ Petal.Width, iris)\n\nThe result is now saved in the model variable we just created. This is a complex R object, which we can see a summary of using\n\nsummary(model)\n\n\nCall:\nlm(formula = Petal.Length ~ Petal.Width, data = iris)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.33542 -0.30347 -0.02955  0.25776  1.39453 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  1.08356    0.07297   14.85   &lt;2e-16 ***\nPetal.Width  2.22994    0.05140   43.39   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4782 on 148 degrees of freedom\nMultiple R-squared:  0.9271,    Adjusted R-squared:  0.9266 \nF-statistic:  1882 on 1 and 148 DF,  p-value: &lt; 2.2e-16\n\n\nThis is complex, but we want model coefficients, that is the m value - the slope (here 2.22994) and the c value - the intercept (here 1.08356), and the adjusted R-squared (0.9266)\n\n2.3 Shorthand notation\nA shorthand in ggplot allows you to leave out the data= part of the function call, if you put the data in the first position so\nggplot(iris) is the same as ggplot(data=iris)\nIn the aes() function we can do the same. We can leave out the x= and y= parts and instead use the first two things in the function call for the x and y axis.\nSo aes(Petal.Length, Petal.Width) is the same as aes(x=Petal.Length, y=Petal.Width)\n\n\n\n2.3.1 geom_jitter()\nSometimes, point plots get crowded, the points can get too close together, a visual problem called overplotting. A jitter plot lets us get over this by adding a random bit of noise to the position of the points. Here the points from the jitter geom are set to red.\n\np + geom_point() + geom_jitter(colour=\"Red\")\n\n\n\n\n\n\n\n\nWe can fiddle with the range of the jitter with width and height options\n\np + geom_point() + geom_jitter(colour=\"Red\", width=0.001, height=0.001)\n\n\n\n\n\n\n\n\nconversely,\n\np + geom_point() + geom_jitter(colour=\"Red\", width=10, height=10)\n\n\n\n\n\n\n\n\nThe defaults are usually a good choice though.\n\n\n2.3.2 Changing opacity\nOverplotting can be dealt with in other ways, changing the opacity of the geom is another. This is the alpha option. Choose the value in the range 0 to 1, where 0 is invisible and 1 is solid\n\np + geom_point() + geom_jitter(alpha=0.5) \n\n\n\n\n\n\n\n\n\n\n2.3.3 geom_histogram()\nPlotting a histogram is done with the geom_histogram(). The y value for this is calculated automatically, so you provide the x value.\n\np &lt;- ggplot(iris) + aes(Petal.Width)\np + geom_histogram() \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nYou can change the width of the bins with binwidth, or set the number of bins with bins\n\np + geom_histogram(binwidth=0.5) \n\n\n\n\n\n\n\np + geom_histogram(bins=5) \n\n\n\n\n\n\n\n\nTrying to map the species to colour in this one gives us a weird sort of stacked histogram.\n\np + geom_histogram(bins=5, aes(colour=Species, fill=Species),alpha=0.3 ) \n\n\n\n\n\n\n\n\nWe can avoid this in a few ways, one is by using geom_freqpoly(), which is a line graph joining the tops of the bars of the histogram.\n\np + geom_freqpoly( aes(colour=Species), bins=5 )\n\n\n\n\n\n\n\n\nor with geom_density() which gives us smoothed lines from a kernel density estimate of the data (which is a way of generating a smooth curve over histograms).\n\np + geom_density( aes(colour=Species, fill=Species), alpha=0.3)",
    "crumbs": [
      "Making a data appropriate plot",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Common Geoms</span>"
    ]
  },
  {
    "objectID": "04-geoms.html#discrete-geoms",
    "href": "04-geoms.html#discrete-geoms",
    "title": "2  Common Geoms",
    "section": "2.4 Discrete geoms",
    "text": "2.4 Discrete geoms\nLet’s look at some geoms with categories on the x and numbers on the y axis.\n\n2.4.1 geom_point() and geom_jitter()\nBoth these geoms can be used with categoric data in one dimension. This is a useful and very honest way of showing your data points.\n\np &lt;- ggplot(iris) + aes(x=Species, y=Petal.Width)\np + geom_point()\n\n\n\n\n\n\n\np + geom_jitter()\n\n\n\n\n\n\n\n\n\n\n2.4.2 geom_boxplot() and geom_violin()\nA great way to summarise the distributions of points is to use a boxplot in conjunction with the dots.\n\np &lt;- ggplot(iris) + aes(x=Species, y=Petal.Width)\np + geom_jitter() + geom_boxplot()\n\n\n\n\n\n\n\n\nWhich unhelpfully puts the newest layer on top. Reverse the order to see the points\n\np + geom_boxplot(notch=TRUE) + geom_jitter()\n\nNotch went outside hinges\nℹ Do you want `notch = FALSE`?\n\n\n\n\n\n\n\n\n\nA common reason for using the boxplot is to use those notches to show the significant differences in the data. But really, these only help you assess a difference meaningfully if the data are normally distributed. In other circumstances you should be aware that the notches are misleading. Instead you can see the spread of your data much better with a violin plot.\n\np &lt;- ggplot(iris) + aes(x=Species, y=Petal.Width)\np + geom_violin() + geom_jitter() \n\n\n\n\n\n\n\n\nBy turning your head to the side you can see the histogram curve / density distribution a bit more clearly. In fact ggplot has a way to flip a plot, one of a set of things called a transformation.\n\np + geom_violin() + geom_jitter() + coord_flip()\n\n\n\n\n\n\n\n\nNow you can see clearly that the setosa numbers are really badly bunched down at the lower end and a bit skewed by that.\n\n2.5 Boxplots are best for normally distributed data.\nReally, these boxplots, especially the ones with the notches only help you assess a difference if the data is nicely normally distributed ggplot",
    "crumbs": [
      "Making a data appropriate plot",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Common Geoms</span>"
    ]
  },
  {
    "objectID": "04-geoms.html#quiz",
    "href": "04-geoms.html#quiz",
    "title": "2  Common Geoms",
    "section": "2.6 Quiz",
    "text": "2.6 Quiz\n\nIncorporate a jitter and notched boxplot into the Petal.Width and Species plots we already used: ggplot(iris) + aes(Species,Petal.Width)...",
    "crumbs": [
      "Making a data appropriate plot",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Common Geoms</span>"
    ]
  },
  {
    "objectID": "05-factors_facets.html",
    "href": "05-factors_facets.html",
    "title": "3  Using Factors to Subset Data and Plots",
    "section": "",
    "text": "3.1 About this chapter",
    "crumbs": [
      "Making a data appropriate plot",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Using Factors to Subset Data and Plots</span>"
    ]
  },
  {
    "objectID": "05-factors_facets.html#about-this-chapter",
    "href": "05-factors_facets.html#about-this-chapter",
    "title": "3  Using Factors to Subset Data and Plots",
    "section": "",
    "text": "Questions:\n\n\nHow can I make plots that compare multiple categories?”\n\n\nObjectives:\n\n\nUnderstand factors\nUnderstand colouring and faceting on factors\nUse factors for summaries and plot design\n\n\nKeypoints:\n\n\nA factor is a value of a categorical variable, or the different values a label can take\nFactors are needed to subset and add attributes to data dynamically",
    "crumbs": [
      "Making a data appropriate plot",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Using Factors to Subset Data and Plots</span>"
    ]
  },
  {
    "objectID": "05-factors_facets.html#factors",
    "href": "05-factors_facets.html#factors",
    "title": "3  Using Factors to Subset Data and Plots",
    "section": "3.2 Factors",
    "text": "3.2 Factors\nIn previous plots we’ve been using categories, specifically the Species category to split our data, colour our plots etc. These categorical columns are called Factors in R. Looking at the diamonds data set we can see how this is set up in R.\n\nhead(diamonds)\n\n# A tibble: 6 × 10\n  carat cut       color clarity depth table price     x     y     z\n  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n\n\nHere we can see the cut, color and clarity columns are all non-numeric, textual data. These are the factor variables of this dataset. We can confirm that by asking for the class of the column, that is, the type of data in it. We use the dataset $ column name syntax for this.\n\nclass(diamonds$color)\n\n[1] \"ordered\" \"factor\" \n\n\n\nclass(diamonds$depth)\n\n[1] \"numeric\"\n\n\nWe can also ask for all the different values of the factor, in R called the levels\n\nlevels(diamonds$color)\n\n[1] \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\n\n\nlevels(diamonds$cut)\n\n[1] \"Fair\"      \"Good\"      \"Very Good\" \"Premium\"   \"Ideal\"",
    "crumbs": [
      "Making a data appropriate plot",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Using Factors to Subset Data and Plots</span>"
    ]
  },
  {
    "objectID": "05-factors_facets.html#colouring-by-factors",
    "href": "05-factors_facets.html#colouring-by-factors",
    "title": "3  Using Factors to Subset Data and Plots",
    "section": "3.3 Colouring by factors",
    "text": "3.3 Colouring by factors\nLet’s look at applying mappings by a factor. Let’s look at how price varies by cut.\n\np &lt;- ggplot(diamonds) +  aes(cut,price) \np + geom_jitter()\n\n\n\n\n\n\n\n\nNow let’s throw a second variable in there, lets see how color varies within each cut. We do this by creating a new aesthetic mapping within the geom_jitter()\n\np + geom_jitter(aes(colour=color))\n\n\n\n\n\n\n\n\nThe spots are all overlapping, we can force the different colours to stay separate with the position option. We use position_dodge() to make them dodge each other. The width option tells the spots how far to stay apart.\n\np + geom_jitter(aes(colour=color), position=position_dodge(width=0.5) )\n\n\n\n\n\n\n\n\nWe can also throw other geoms on top in the same way. EG Boxplots for each cut and colour\n\np + geom_jitter(aes(colour=color), position=position_dodge(width=0.5) ) + geom_boxplot( aes(colour=color), position=position_dodge() )\n\n\n\n\n\n\n\n\nRemember layers/geoms are independent, so can be set up to show individual aspects of the data. Let’s have a boxplot for the whole of the cut, irrespective of the colour.\n\np + geom_jitter(aes(colour=color),position=position_dodge(width=0.5)) + geom_boxplot() \n\n\n\n\n\n\n\n\nAnd of course, the whole thing still works even if we are comparing two numerical columns. We can still use the aesthetic mapping in the geom to colour our points by a factor\n\nggplot(diamonds) + aes(carat, price) + geom_point(aes(colour=cut))",
    "crumbs": [
      "Making a data appropriate plot",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Using Factors to Subset Data and Plots</span>"
    ]
  },
  {
    "objectID": "05-factors_facets.html#small-multiple-plots",
    "href": "05-factors_facets.html#small-multiple-plots",
    "title": "3  Using Factors to Subset Data and Plots",
    "section": "3.4 Small multiple plots",
    "text": "3.4 Small multiple plots\nSometimes, trying to squeeze a lot of data into one plot isn’t the clearest way to show it. Instead small multiple plots (different data, same settings) can be used. In ggplot, this is called faceting and is done with the facet_wrap() or facet_grid() function. We use the factors to define the facet. Let’s add faceting to the previous plot\n\np &lt;- ggplot(diamonds) + aes(carat, price) \np + geom_point(aes(colour=cut)) + facet_wrap( ~ cut)\n\n\n\n\n\n\n\n\nHere we see the plot is divided into panels, one for each ‘cut’. The facet_wrap() function puts all the panels into a single row, but wll wrap that row as space demands. The syntax is a bit odd, we used the ~ operator to mean ‘varies by’ , even though we only used one variable. It’s just a quirk of ggplot.\nThe facet_grid() function forces a grid structure and can take more than one factor. Now the ~ ‘varies by’ syntax makes more sense:\n\np + geom_point(aes(colour=cut)) + facet_grid(color ~ cut)",
    "crumbs": [
      "Making a data appropriate plot",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Using Factors to Subset Data and Plots</span>"
    ]
  },
  {
    "objectID": "05-factors_facets.html#quiz",
    "href": "05-factors_facets.html#quiz",
    "title": "3  Using Factors to Subset Data and Plots",
    "section": "3.5 Quiz",
    "text": "3.5 Quiz\nThe built in dataset CO2 describes measurement of CO2 uptake versus concentration for Quebec and Mississippi grasses in chilled and nonchilled tests. The dataset is as follows:\n\nType is a factor column with two levels Quebec and Mississippi\nTreatment is a factor colum with two levels nonchilled and chilled\nUptake is a numerical colum with CO2 uptake rate in micromoles per metre squared per second\nPlant is a factor with twelve levels, one for each individual plant assayed.\n\n\nCreate a plot with geom_point() that shows the Plant on the x-axis and the Uptake on the y-axis. Colour the points by ‘Type’ and facet_wrap() by Treatment to get a subplot for chilled and nonchilled.",
    "crumbs": [
      "Making a data appropriate plot",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Using Factors to Subset Data and Plots</span>"
    ]
  },
  {
    "objectID": "07-themes.html",
    "href": "07-themes.html",
    "title": "4  Visual Customisation",
    "section": "",
    "text": "4.1 Themes\nAt some point you’re going to want to custom/personalise or generally improve the look of your plots. So far we’ve concentrated on getting the data shown in the right place, now we’ll look at finessing the plot to make a final version. ggplot2 and a companion package ggthemes have a wide variety of ready to go themes that can be applied and modified.\nApplying a built-in theme is very easy, we can think of the theme as a new layer to add. This code will give us a standard plot\np &lt;- ggplot(iris) + aes(Petal.Width,Petal.Length) + geom_point(aes(colour=Species)) \np\nLet’s add a theme_bw() layer. Which is really a simple theme that takes away all colour you didn’t explicitly ask for - so the points stay coloured.\np &lt;- ggplot(iris) + aes(Petal.Width,Petal.Length) + geom_point(aes(colour=Species)) \np + theme_bw()",
    "crumbs": [
      "Making a data appropriate plot",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visual Customisation</span>"
    ]
  },
  {
    "objectID": "07-themes.html#quiz",
    "href": "07-themes.html#quiz",
    "title": "4  Visual Customisation",
    "section": "4.2 Quiz",
    "text": "4.2 Quiz\n\nggplot itself only has a few themes built in. Try theme_minimal(), theme_grey() and theme_dark().\nUse the docs at https://github.com/jrnold/ggthemes to examine the themes that are available in this external package. Try loading the package and using some of the themes. Don’t miss theme_excel().",
    "crumbs": [
      "Making a data appropriate plot",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visual Customisation</span>"
    ]
  },
  {
    "objectID": "07-themes.html#the-theme-function",
    "href": "07-themes.html#the-theme-function",
    "title": "4  Visual Customisation",
    "section": "4.3 The theme() function",
    "text": "4.3 The theme() function\nChanging the theme wholesale by applying a theme layer is great, but you’ll usually want to change individual theme elements. This is possible too, and is done using the theme() function.\n\np &lt;- ggplot(iris) + aes(Petal.Width,Petal.Length) + geom_point(aes(colour=Species)) \np + theme_bw() + theme(text = element_text(family = \"Times\", colour = \"blue\", size = 14))\n\n\n\n\n\n\n\n\nSo here we built a plot, applied a theme layer and then modified an element of that theme. The theme layer is really just a list of plot elements and their current settings. Conceptually it looks like this:\n - line = element_line(colour=\"black\", size=0.5),\n - text = element_text(family=\"Arial\", colour=\"black\", size=12)\nWith the thing on the left of the equals being the attribute of the plot e.g the line or the text and the thing on the right of the equals being the function that does the changing. Each plot element can be reset by using the proper function and setting the options for that function appropriately. Just like we did above!\nSome of the attributes apply across the whole plot, this one text applies to all text in the plot.\n\np + theme_bw() + theme(text = element_text(family = \"Times\", colour = \"blue\", size = 14))\n\n\n\n\n\n\n\n\nBut this one axis.text.x changes only the x axis text.\n\np + theme_bw() + theme(axis.text.x = element_text(colour=\"red\"))\n\n\n\n\n\n\n\n\nA full list of plot elements and the functions to set them are in http://docs.ggplot2.org/dev/vignettes/themes.html and here are the most important ones. The options for each element function are in the ggplot2 docs http://docs.ggplot2.org/dev/element.html\n\n      line =               element_line(),\n      rect =               element_rect(),\n      text =               element_text(),\n      axis.text =          element_text(),\n      strip.text =         element_text(),\n  \n      axis.line =          element_blank(),\n      axis.text.x =        element_text(),\n      axis.text.y =        element_text(),\n      axis.ticks =         element_line(),\n      axis.title.x =       element_text(),\n      axis.title.y =       element_text(),\n      axis.ticks.length =  unit(),\n      axis.ticks.margin =  unit(),\n  \n      legend.background =  element_rect(),\n      legend.margin =      unit(),\n      legend.key =         element_rect(),\n      legend.key.size =    unit(),\n      legend.text =        element_text(),\n      legend.title =       element_text(),\n\n      legend.position =    \"right\",\n      legend.justification = \"center\",\n\n      panel.background =   element_rect(),\n      panel.border =       element_blank(),\n      panel.grid.major =   element_line(),\n      panel.grid.minor =   element_line(),\n      panel.margin =       unit(),\n  \n      strip.background =   element_rect(),\n      strip.text.x =       element_text(),\n      strip.text.y =       element_text(),\n  \n      plot.background =    element_rect(),\n      plot.title =         element_text(),\n      plot.margin =        unit(),\n      \nPutting these together if we want to make our legend text a bit bigger, and use Helvetica font, in green, we’d follow this scheme:\n\nUse the list above to find which element is the right one for legend text. Here it will be legend.text\nRead off the element function for the legend.text, here it is element_text()\nUse the ggplot2 docs to see the options for that element function: http://docs.ggplot2.org/dev/element.html\nForm the theme function: theme( legend.text = element_text(size = 20, family=\"Helvetica\", colour=\"green\") )\nAdd it to the plot plot + theme( legend.text = element_text(size = 20, family=\"Helvetica\", colour=\"green\") )",
    "crumbs": [
      "Making a data appropriate plot",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visual Customisation</span>"
    ]
  },
  {
    "objectID": "07-themes.html#changing-the-order-of-categories-in-the-plot",
    "href": "07-themes.html#changing-the-order-of-categories-in-the-plot",
    "title": "4  Visual Customisation",
    "section": "4.4 Changing the order of categories in the plot",
    "text": "4.4 Changing the order of categories in the plot\nThe list of options above doesn’t provide anything we can use to specify the order in which the different categories are displayed. Instead this is done with a new type of function, the scale family of functions. By using the scale_x_discrete() function and options (especially the limits) we can set the way the scale on the axis is set. For a discrete (or categorical) variable this includes the order.\n\np &lt;- ggplot(iris) + aes(Species,Petal.Length) + geom_boxplot() \np + scale_x_discrete(limits=c(\"versicolor\", \"setosa\", \"virginica\"))\n\n\n\n\n\n\n\n\nYou can change labels in the same way with the labels option,\n\np + scale_x_discrete(limits=c(\"versicolor\", \"setosa\", \"virginica\"), labels=c(\"Ve\", \"Se\", \"Vi\"))\n\n\n\n\n\n\n\n\nYou can reorder based on the value of some other value, e.g get the boxes ordered by the Petal.Length variable by squeezing in the reorder() function. Unusually, this is done in the aes() function in the aesthetic layer. We want to reorder the x-axis so we use the reorder() function on that. The syntax is reorder(&lt;variable to reorder&gt;, &lt;variable to reorder by), so here we’re changing the order of the Species on the x-axis according to what is in Petal.Length.\n\np &lt;- ggplot(iris) + aes(x=reorder(Species, Petal.Length), y=Petal.Length ) + geom_boxplot()\np\n\n\n\n\n\n\n\n\n\n4.5 Text formatting in plots\nBiological notation is frustrating because it uses text formatting to express differences between things. So the wild-type allele is referred to in italics or underlined capitals whereas a mutant is referred to in italic or underlined lower case. Programming languages have a hard time with text formatting, so tend to deal with plain text. ggplot is no exception and there isn’t a way to make your labels italic. The best way to achieve this, therefore is to save the plot as a .svg file, then edit the labels manually in a graphics program like Inkscape.",
    "crumbs": [
      "Making a data appropriate plot",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visual Customisation</span>"
    ]
  },
  {
    "objectID": "07-themes.html#changing-the-limits-of-a-continuous-scale",
    "href": "07-themes.html#changing-the-limits-of-a-continuous-scale",
    "title": "4  Visual Customisation",
    "section": "4.6 Changing the limits of a continuous scale",
    "text": "4.6 Changing the limits of a continuous scale\nThe scale_x_discrete() function has analogous functions for the y-axis and for continuous axes - I.E. scale_y_discrete() and scale_x_continuous() and scale_y_continuous(). The most common thing to want to do with a continuous scale is set the limits, the start and end points.\n\np &lt;- ggplot(iris) + aes(Species, Petal.Length ) + geom_boxplot()\np + scale_y_continuous(limits =c(0,100))\n\n\n\n\n\n\n\n\nIt is also possible to change the scale to a logarithmic one with the scale_y_log10(), function, reverse it with scale_y_reverse() functions.\n\np + scale_y_reverse()\n\n\n\n\n\n\n\np + scale_y_log10()",
    "crumbs": [
      "Making a data appropriate plot",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visual Customisation</span>"
    ]
  },
  {
    "objectID": "07-themes.html#quiz-1",
    "href": "07-themes.html#quiz-1",
    "title": "4  Visual Customisation",
    "section": "4.7 Quiz",
    "text": "4.7 Quiz\n\nUsing the iris dataset, create a boxplot of Petal Width for each species\nOverlay the actual data by adding a jitter plot\nRemove the grey background of the plot (Hint: try element_blank() and panel.background)\nChange the Y axis title to ‘Petal Width’\nRemove the X axis title\nMake the species names bigger\nMake the thick panel grid lines black, remove the thin panel grid lines.\nSet the order of species to ‘virginica’, ‘setosa’, ‘versicolor’ Extra Credit: Set the values on the species axis to ‘Iris virginica’, ‘Iris setosa’, ‘Iris versicolor’",
    "crumbs": [
      "Making a data appropriate plot",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visual Customisation</span>"
    ]
  },
  {
    "objectID": "06-rmarkdown.html",
    "href": "06-rmarkdown.html",
    "title": "5  RMarkdown for Reproducible Publishable Plots",
    "section": "",
    "text": "5.1 About this chapter",
    "crumbs": [
      "Working reproducibly",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>RMarkdown for Reproducible Publishable Plots</span>"
    ]
  },
  {
    "objectID": "06-rmarkdown.html#about-this-chapter",
    "href": "06-rmarkdown.html#about-this-chapter",
    "title": "5  RMarkdown for Reproducible Publishable Plots",
    "section": "",
    "text": "Questions:\n\n\nHow can I design a plot once and use it for many experiments?\n\n\nObjectives:\n\n\nUse RMarkdown documents to build a plot.\n\n\nKeypoints:\n\n\nReproducible work is good work.\nR Markdown can helps us be reproducible and transparent",
    "crumbs": [
      "Working reproducibly",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>RMarkdown for Reproducible Publishable Plots</span>"
    ]
  },
  {
    "objectID": "06-rmarkdown.html#being-lazy-is-a-virtue.-work-hard-to-be-lazy.",
    "href": "06-rmarkdown.html#being-lazy-is-a-virtue.-work-hard-to-be-lazy.",
    "title": "5  RMarkdown for Reproducible Publishable Plots",
    "section": "5.2 Being lazy is a virtue. Work hard to be lazy.",
    "text": "5.2 Being lazy is a virtue. Work hard to be lazy.\nWriting reproducible code will save you time and effort. Computers are especially good at carrying out commands and if you are smart enough to put those commands in an executable document, rather than run the whole thing by hand every time, you’ll save time, you can ensure that you’ll do the same thing everytime and those who look at your work later will be absolutely clear about what you did.\nOf course, this takes a little bit more effort up front, but it will pay off. And R Studio has plenty of ways to help you do just this. R Markdown documents are one such way. For the rest of this course we’ll be putting our code into R Markdown.",
    "crumbs": [
      "Working reproducibly",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>RMarkdown for Reproducible Publishable Plots</span>"
    ]
  },
  {
    "objectID": "06-rmarkdown.html#r-markdown",
    "href": "06-rmarkdown.html#r-markdown",
    "title": "5  RMarkdown for Reproducible Publishable Plots",
    "section": "5.3 R Markdown",
    "text": "5.3 R Markdown\nMarkdown is a way of adding little tags to text, to define parts of the structure of it, so that when a file written in Markdown is sent to a program that knows how to interpret it, the program can render the text as you intended.\nR Studio has the ability to take a document written in Markdown, squeeze R code into it and produce the output in a pretty format. The flavour is called R Markdown. By combining this with our plotting knowledge, we can make a dynamic document that can be re-run every time we get a new dataset.\nYou can find more information on R Markdown in this handy cheat sheet https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf\n\n5.3.1 A new R Markdown document\nCreating an R Markdown document is easy. In R Studio, use the menu File -&gt; New File -&gt; R Markdown and you’ll get a dialogue box like\n\n\n\ndialogue box\n\n\nLeave everything as default (making a document with output format html) and click OK. A new panel should appear in R Studio. The header looks like:\n---\ntitle: \"Untitled\"\nauthor: \"Dan MacLean\"\ndate: \"21 September 2020\"\noutput: html_document\n---\nThe top four lines are metadata about the document, R will use this to make an automatic header. You can change the values of title, author and date if you like. The last bit about output defines the type of document you can get.\nThe rest of the document is straightforward text right up to the parts with the three backticks ‘```’ (weird quote things). These are the blocks of R code that will get evaluate in our R markdown. Anything between two sets of three backticks is sent to R and treated as R code, so that\n```{r cars}\nsummary(cars)\n```\nGets the output of the summary() function in that position. To see this work, click the Knit HTML button and choose a filename for the R markdown document.\nThe eventual document produced is nicely formatted markdown with R code and results added in the proper place.\n\n\n\n\n\n\nMore Information\n\n\n\nMarkdown provides a rich set of tags to mark up the document to make it look as pretty as you like. Here’s a cheat-sheet you can use to make your own Markdown documents https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\nSee also the course here https://danmaclean.github.io/literate_computing",
    "crumbs": [
      "Working reproducibly",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>RMarkdown for Reproducible Publishable Plots</span>"
    ]
  },
  {
    "objectID": "06-rmarkdown.html#quiz",
    "href": "06-rmarkdown.html#quiz",
    "title": "5  RMarkdown for Reproducible Publishable Plots",
    "section": "5.4 Quiz",
    "text": "5.4 Quiz\n\nMake a new R Markdown document that creates and renders a plot of your choice - any of the ones you’ve already done will be fine. Hint: Every time you run a markdown document the computer’s memory is cleared for that document, it doesn’t know about what goes on outside of the document. You need to load libraries and files in the document, even if they are loaded in R Studio already",
    "crumbs": [
      "Working reproducibly",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>RMarkdown for Reproducible Publishable Plots</span>"
    ]
  },
  {
    "objectID": "08-data-loading.html",
    "href": "08-data-loading.html",
    "title": "6  Loading your own data",
    "section": "",
    "text": "6.1 Tidy data\nThere are many ways to structure data. Here are two quite common ones.\nsource: Hadley Wickham\nTables contain two things, variables and values for those variables. In these two tables there are only three variables. treatment is one, with the values a and b . The second is ‘name’, with three values hidden in plain sight, and the third is result which is the value of the thing actually measured for each person and treatment.\nFor human reading purposes, we don’t need to state the variables explicitly, we can see them by interpolating between the columns and rows and adding a bit of common sense. This mixing up of variables and values across tables like this has led some to call these tables ‘messy’. A computer finds it hard to make sense of a messy table.\nWorking with R is made much less difficult if we get the data into a ‘tidy’ format. This format is distinct because each variable has its own column explicitly, like this\nNow each variable has a column, and each seperate observation of the data has its own row. It is much more verbose for a human, but R can use this easily because we are now explicit about what is called what and how it relates to everything else.",
    "crumbs": [
      "Working reproducibly",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Loading your own data</span>"
    ]
  },
  {
    "objectID": "08-data-loading.html#tidy-data",
    "href": "08-data-loading.html#tidy-data",
    "title": "6  Loading your own data",
    "section": "",
    "text": "treatmenta\n\n\ntreatmentb\n\n\n\nJohn Smith\n\n\n11\n\n\n2\n\n\n\n\nJane Doe\n\n\n16\n\n\n11\n\n\n\n\nMary Johnson\n\n\n3\n\n\n1\n\n\n\n\n\n\n\nJohn Smith\n\n\nJane Doe\n\n\nMary Johnson\n\n\n\ntreatementa\n\n\n11\n\n\n16\n\n\n3\n\n\n\n\ntreatementb\n\n\n2\n\n\n11\n\n\n1\n\n\n\n\n\n\n\n\n\nname\n\n\ntreatment\n\n\nresult\n\n\n\nJohn Smith\n\n\na\n\n\n11\n\n\n\n\nJane Doe\n\n\na\n\n\n16\n\n\n\n\nMary Johnson\n\n\na\n\n\n3\n\n\n\n\nJohn Smith\n\n\nb\n\n\n2\n\n\n\n\nJane Doe\n\n\nb\n\n\n11\n\n\n\n\nMary Johnson\n\n\nb\n\n\n1",
    "crumbs": [
      "Working reproducibly",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Loading your own data</span>"
    ]
  },
  {
    "objectID": "08-data-loading.html#getting-your-data-into-tidy-format",
    "href": "08-data-loading.html#getting-your-data-into-tidy-format",
    "title": "6  Loading your own data",
    "section": "6.2 Getting your data into tidy format",
    "text": "6.2 Getting your data into tidy format\nThe bad news here is that there is no magic function to make your data tidy. If you have an existing table then you can do this manually in Excel or some other spreadsheet package. If you have lots of data, it is possible to do it programmatically in R, see the dplyr and tidyr packages, which are complex but designed for this purpose. Also have a look at the cheat-sheet here https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf.",
    "crumbs": [
      "Working reproducibly",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Loading your own data</span>"
    ]
  },
  {
    "objectID": "08-data-loading.html#loading-in-a-csv-file",
    "href": "08-data-loading.html#loading-in-a-csv-file",
    "title": "6  Loading your own data",
    "section": "6.3 Loading in a CSV file",
    "text": "6.3 Loading in a CSV file\nR can deal with a lot of file formats, but the most common and easily used one is ‘csv’, a comma-separated value file. These can be exported from virtually any spreadsheet program so it’s a good interchange format to get data into R from wherever you already have it. Loading a file is done easily with the readr package`.\nreadr is a tool for loading data into R. It can be loaded on its own with library(readr). We will use readr to load in data from a ‘flat’ .csv file.\n\n6.3.1 read_csv()\nThe main function is read_csv() which can read a standard comma seperated values file from disk into an R dataframe. There are a few variants of read_csv() which may be appropriate for different sorts of .csv file, but they all work the same.\n\nread_csv2() - reads semi-colon delimited files, which are commonly used where a comma is used as a decimal separator\nread_tsv() - reads tab delimited files\nread_delim() - reads files delimited by an arbitrary character\n\nThe first argument to read_csv() is the path to the file to read. Here I’ll read a file on my Desktop that contains the diamonds data we’ve been using.\n\nlibrary(readr)\nread_csv(\"~/Desktop/diamonds.csv\")\n\nThis will create an object called a dataframe that can be used just like the built-in data.",
    "crumbs": [
      "Working reproducibly",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Loading your own data</span>"
    ]
  },
  {
    "objectID": "08-data-loading.html#finding-the-file",
    "href": "08-data-loading.html#finding-the-file",
    "title": "6  Loading your own data",
    "section": "6.4 Finding the file",
    "text": "6.4 Finding the file\nR needs to be given the correct and full path to a file. This means the full address of the file on the hard disk of your computer. R doesn’t have a file chooser so you need to know how to write this down.\nComputer file systems are laid out in folders and sub-folders with files inside them. Conceptually, this results in a tree of folders and a path down the branches from the root of the tree to everything else. The root gets called ‘/’ on Mac/Linux computers and ’C:' on Windows computers\n source: Software Carpentry\nThis picture of an example file system shows how that is formed. When we write this down, everytime we go inside a new folder we use a slash to show we’ve changed folder. Most computer systems have a ‘Users’ or similar folder in which each users stuff is stored. Supposing we’re in Larry’s folder then the path would be /Users/larry. And a file called my_file.txt in that folder would be /Users/larry/my_file.txt.\nSo to write the full file path for R we can use this pattern, the first bit would be /Users/username/ (or C:\\Documents and Settings\\username\\ or C:\\Users\\username\\) and then the set of folders within that user area follows on. If your file my_file.txt is on the Desktop the full path would be /Users/username/Desktop/my_file.txt (or C:/Documents and Settings/username/Desktop/my_file.txt)\n\n6.4.1 Make it easy on yourself\nThe easiest way not to have to think too hard about this stuff is to set up a consistent folder and file structure for every analysis and use RMarkdown documents to run your analysis. Here’s an example scheme:\n\nCreate a new folder and call it something relevant to your experiment, e.g disease_incidence_2019-11-01\nWithin the folder create a sub-folder called raw and a sub-folder called output_images.\nPut your tidy csv file in the raw folder.\nCreate a new R Markdown document and save it in the disease_incidence_2019-11-01 folder.\n\nNow whenever you open and run that R Markdown document, the path of your input file is \"raw/my_input_filename.csv\". You can save your plots with the ggsave() function to \"output_images/filename.png\" (don’t forget the quotes).\nIf you never mess around with the relative positions of the files and folders described, then the paths will always be the same. You can move the whole folder without worrying, just don’t jumble it’s contents.",
    "crumbs": [
      "Working reproducibly",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Loading your own data</span>"
    ]
  },
  {
    "objectID": "08-data-loading.html#making-sure-the-data-types-are-correct",
    "href": "08-data-loading.html#making-sure-the-data-types-are-correct",
    "title": "6  Loading your own data",
    "section": "6.5 Making sure the data types are correct",
    "text": "6.5 Making sure the data types are correct\nWhen we load new data we need to make sure that any header has been properly parsed as column names, and that the columns have been identified as the right sort of data\nOn loading with readr we see a column specification, read_csv() has guessed at what the columns should be and made those types. Its fine for the most part, but some of those columns we’d prefer to be factors. We can set our own column specification to force the column types on loading. We only have to do the ones that read_csv() gets wrong. Specifically, lets fix cut and color to a factor. We can do that with the col_types argument.\n\nread_csv(\"~/Desktop/diamonds.csv\",\n    col_types = cols(\n      cut = col_factor(NULL),\n      color = col_factor(NULL)\n    )\n)\n\n\n6.5.1 Parser functions\nThis works by assigning a parser function that returns a specific type to each column, here it’s col_factor(). There are parser functions for all types of data, and all of them can be used if read_csv() doesn’t guess your data properly. We won’t go into detail of all of them, just remember that if your numbers or dates or stuff won’t load properly, there’s a parser function that can help.\nOnce the specification shows what you expect, then you are good to start analysing.",
    "crumbs": [
      "Working reproducibly",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Loading your own data</span>"
    ]
  },
  {
    "objectID": "08-data-loading.html#quiz",
    "href": "08-data-loading.html#quiz",
    "title": "6  Loading your own data",
    "section": "6.6 Quiz",
    "text": "6.6 Quiz\n1. Make a new folder called `analysis` on the Desktop\n2. Inside `analysis` make a new folder called `raw` and put `example_ros_data_flg22.xlsx` into it.\n3. Start a new R Markdown document and save it in `analysis`\n\nConvert raw/example_ros_data_flg22.xlsx into a ‘tidy’ format .csv file and save to raw\nLoad in the data from the tidy file using read.csv() (Hint: You may need to save a csv version from Excel - R won’t read .xlsx files.)\nCheck the datatypes and headers using str(), change them if necessary.\nCreate a plot that shows each data point in each treatment (Col, pp2c38, pp2c48 pp2c38/pp2c48) in each day the experiment was done.\nMake sure the plot you generate gets saved to a folder inside analysis called output_images",
    "crumbs": [
      "Working reproducibly",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Loading your own data</span>"
    ]
  },
  {
    "objectID": "prerequisites.html",
    "href": "prerequisites.html",
    "title": "Prerequisites",
    "section": "",
    "text": "Installing R\nNo specific knowledge prerequisites for this book but it will help if you are familiar with some common statistical tests, t, ANOVA and regression for the later parts. You will also find a knowledge of how to write computer file paths helpful.\nYou need to install the following stuff for this book:\nFollow this link and install the right version for your operating system https://www.stats.bris.ac.uk/R/",
    "crumbs": [
      "Appendices",
      "Prerequisites"
    ]
  },
  {
    "objectID": "prerequisites.html#installing-rstudio",
    "href": "prerequisites.html#installing-rstudio",
    "title": "Prerequisites",
    "section": "Installing RStudio",
    "text": "Installing RStudio\nFollow this link and install the right version for your operating system https://www.rstudio.com/products/rstudio/download/",
    "crumbs": [
      "Appendices",
      "Prerequisites"
    ]
  },
  {
    "objectID": "prerequisites.html#installing-r-packages-in-rstudio.",
    "href": "prerequisites.html#installing-r-packages-in-rstudio.",
    "title": "Prerequisites",
    "section": "Installing R packages in RStudio.",
    "text": "Installing R packages in RStudio.\n\nStandard packages\nStart RStudio and use the Packages tab in lower right panel. Click the install button (top left of the panel) and enter the package name eg ggplot2, then click install as in this picture\n\n\n\nInstalling Packages",
    "crumbs": [
      "Appendices",
      "Prerequisites"
    ]
  },
  {
    "objectID": "r-fundamentals.html",
    "href": "r-fundamentals.html",
    "title": "R Fundamentals",
    "section": "",
    "text": "About this chapter",
    "crumbs": [
      "Appendices",
      "R Fundamentals"
    ]
  },
  {
    "objectID": "r-fundamentals.html#about-this-chapter",
    "href": "r-fundamentals.html#about-this-chapter",
    "title": "R Fundamentals",
    "section": "",
    "text": "Questions:\n\n\nHow do I use R?\n\n\nObjectives:\n\n\nBecome familiar with R syntax\nUnderstand the concepts of objects and assignment\nGet exposed to a few functions\n\n\nKeypoints:\n\n\nR’s capabilities are provided by functions\nR users call functions and get results",
    "crumbs": [
      "Appendices",
      "R Fundamentals"
    ]
  },
  {
    "objectID": "r-fundamentals.html#working-with-r",
    "href": "r-fundamentals.html#working-with-r",
    "title": "R Fundamentals",
    "section": "Working with R",
    "text": "Working with R\nIn this workshop we’ll use R in the extremely useful RStudio package. For the most part we’ll work interactively, meaning we’ll type stuff straight into the R console in RStudio (Usually this is a window on the left or lower left) and get our results there too (usually in the consoled or in a window on the right). That’s what you see in panels like the ones below - first the thing to type into R, and below it, the calculated result from R. Let’s look at how R works by using it for it’s most basic job - as a calculator:\n\n 3 + 5\n\n[1] 8\n\n\n\n 12 * 2\n\n[1] 24\n\n\n\n 1 / 3\n\n[1] 0.3333333\n\n\n\n 12 * 2\n\n[1] 24\n\n\n\n  3 / 0\n\n[1] Inf\n\n\nFairly straightforward, we type in the expression and we get a result. That’s how this whole book will work, you type the stuff in, and get answers out. It’ll be easiest to learn if you go ahead and copy the examples one by one. Try to resist the urge to use copy and paste. Typing longhand really encourages you to look at what you’re entering.\nAs far as the R ouput itself goes, it’s really straightforward - its just the answer with a [1] stuck on the front. This [1] tells us how far through the output we are. Often R will return long lists of numbers and it can be helpful to have this extra information",
    "crumbs": [
      "Appendices",
      "R Fundamentals"
    ]
  },
  {
    "objectID": "r-fundamentals.html#variables",
    "href": "r-fundamentals.html#variables",
    "title": "R Fundamentals",
    "section": "Variables",
    "text": "Variables\nWe can save the output of operations for later use by giving it a name using the assignment symbol &lt;-. Read this symbol as ‘gets’, so x &lt;- 5 reads as ‘x gets 5’. These names are called variables, because the value they are associated with can change.\nLet’s give five a name, x then refer to the value 5 by it’s name. We can then use the name in place of the value. In the jargon of computing we say we are assigning a value to a variable.\n\n x &lt;- 5\n x\n\n[1] 5\n\n\n\n x * 2\n\n[1] 10\n\n\n\ny &lt;- 3\nx * y\n\n[1] 15\n\n\nThis is of course of limited value with just numbers but is of great value when we have large datasets, as the whole thing can be referred to by the variable.\n\nUsing objects and functions\nAt the top level, R is a simple language with two types of thing: functions and objects. As a user you will use functions to do stuff, and get back objects as an answer. Functions are easy to spot, they are a name followed by a pair of brackets like mean() is the function for calculating a mean. The options (or arguments) for the function go inside the brackets:\n\n sqrt(16)\n\n[1] 4\n\n\nOften the result from a function will be more complicated than a simple number object, often it will be a vector (simple list), like from the rnorm() function that returns lists of random numbers\n\n rnorm(100)\n\n  [1] -0.03548570  1.46012397 -0.04435303  1.42966937 -0.69315244  0.16896994\n  [7] -0.34957435  0.58066763  0.94742322 -0.21795171 -0.99883753  0.78464616\n [13]  1.20191055  1.45516181  1.28194242 -1.56975941 -0.62503979  0.31038713\n [19] -0.20362370  0.87734737 -1.42437923 -0.28343985  0.79611135 -0.22572899\n [25] -0.67523991 -1.09733299 -2.12264833 -0.97042741 -0.48995629  0.53219754\n [31]  0.73196769 -0.55300891  0.11861166 -0.22127144 -1.07668660  1.22972279\n [37] -2.47114515  0.60282493 -0.57065749 -1.41577595  0.46200967 -2.84538026\n [43]  0.53563577  0.24391481 -1.12674219  0.67143249  2.94794102 -0.49905272\n [49] -1.32768039  0.23890197  0.53940310  0.53444755 -1.31676547 -1.40505653\n [55]  1.80473292 -0.86136267 -0.62705364 -1.03616520 -0.19086318  1.79803018\n [61]  0.83565856 -2.41265215 -0.47677717 -0.37921805  1.03527654  0.86471987\n [67]  0.15736576  1.02863677 -0.51506483 -0.67047859  1.08368862 -0.19860346\n [73] -0.65397211  0.66198037 -0.97014912 -0.16342496 -0.37280414  0.94065716\n [79]  0.40564450  0.67017093  0.14828275 -0.32762283  0.06940595  2.47976845\n [85] -1.16697485 -0.31073539 -0.05093353 -0.49782145  0.81365390  0.13200811\n [91] -0.71111201  1.60120609  1.18892649 -0.27749831  0.42727625  0.43376581\n [97]  0.25220695 -1.09405855  0.31086717 -1.44228719\n\n\nWe can combine objects, variables and functions to do more complex stuff in R, here’s how we get the mean of 100 random numbers.\n\nnumbers &lt;- rnorm(100)\nmean(numbers)\n\n[1] -0.05169116\n\n\nHere we created a vector object with rnorm(100) and assigned it to the variable numbers. We than used the mean() function, passing it the variable numbers. The mean() function returned the mean of the hundred random numbers.",
    "crumbs": [
      "Appendices",
      "R Fundamentals"
    ]
  },
  {
    "objectID": "r-fundamentals.html#quiz",
    "href": "r-fundamentals.html#quiz",
    "title": "R Fundamentals",
    "section": "Quiz",
    "text": "Quiz\n\nCreate two variables, a and b: Add them. What happens if we change a and then re-add a and b?\nWe can also assign a + b to a new variable, c. How would you do this?\nTry some R functions: round(), c(), range(), plot() hint: Get help on a function by typing ?function_name e.g ?c(). Use the mean() function to calculate the average age of everyone in your house (Invent a housemate if you have to).",
    "crumbs": [
      "Appendices",
      "R Fundamentals"
    ]
  }
]